[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

var current_file: String
var playback_pos := 0.0
var queue: Array = []
var loop_track := false
var autoplay := true

func raw_load_file(filepath: String, bytes = null) -> AudioStream:
	
	var ext := filepath.get_extension()
	var f = File.new()
	var stream: AudioStream
	
	if ext == \"mp3\":
		stream = AudioStreamMP3.new()
	elif ext == \"ogg\":
		stream = AudioStreamOGGVorbis.new()
	elif ext == \"flac\":
		stream = AudioStreamFLAC.new()
	
	if bytes == null:
		var err = f.open(filepath, File.READ)
	
		if err != OK:
			printerr(err, filepath)
			f.close()
			return AudioStreamSample.new()
		stream.data = f.get_buffer(f.get_len())
		f.close()
	else:
		stream.data = bytes
	
	return stream

func play_file(track, stop_playback = true):
	if not track:
		return
	
	var path = track.path if track is AlbumTrack else track
		
	if path == current_file:
		return
	else:
		current_file = path
	
	var stream: AudioStream
	if track is AlbumTrack and track.zip_source != null:
		stream = raw_load_file(current_file, track.zip_source.read_file(track.path.split('::')[1]))
	else:
		stream = raw_load_file(current_file)
	#(stream)
	$Stream.stream = stream
	playback_pos = 0.0
	$Length.max_value = stream.get_length()
	$Length.value = playback_pos
	
	if stop_playback == true:
		#play.text = \"契\"
		#$Ticker.stop()
		emit_signal(\"paused\")
	else:
		$Stream.play()
		#play.text = \"\"
		emit_signal(\"playing\")
	
	if track is AlbumTrack and track.metadata:
		$Title.text = track.metadata.get_title()
		$AspectRatioContainer.hint_tooltip = track.metadata.get_artist()
	else:
		var tag_f := TagFile.new()
		tag_f.open_path(ProjectSettings.globalize_path(current_file))
		
		var image = tag_f.get_album_art()
		if image:
			art.texture.set_data(image)
			
		$Title.text = tag_f.get_title()
		tag_f.close()

func queue_append_play(p: String):
	queue.push_back(p)
	if not $Stream.playing:
		play_file(queue.pop_front())

func play_album(tracksList: Container, index: int, album_art: Texture):
	art.texture = album_art
	var tracks = tracksList.get_children()
	
	queue = []
	for i in range(index, tracks.size()):
		queue.push_back(tracks[i] as AlbumTrack)
	play_file(queue.pop_front(), not autoplay)
"

[node name="AudioStreamPlayer" type="AudioStreamPlayer"]
script = SubResource( 1 )
